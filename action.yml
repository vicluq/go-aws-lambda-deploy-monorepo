name: Deploy Golang AWS Lambda Monorepo
description: This action allows users o deploy a monorepo of golang lambda applications on push
author: Victoria Luquet
branding:
  icon: "box"
  color: "green"

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1 # Change to yours
  ENTRY_FILE: main.go # Change to yours
  REPO_NAME: ${GITHUB_REPOSITORY#*/} # Change to yours
    
permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        service_folders: ["service1", "service2"]

    steps:  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if lambda files have changed
        id: deployable
        continue-on-error: true
        run: git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "^(${{matrix.service_folders}}|shared)\/"  
      
      - name: Config AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        if: steps.deployable.outcome == 'success'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Go
        if: steps.deployable.outcome == 'success'
        uses: actions/setup-go@v5
        with:
          go-version: '1.x'

      - name: Install dependencies
        if: steps.deployable.outcome == 'success'
        run: go get .
    
      - name: Building Code
        if: steps.deployable.outcome == 'success'
        run: |
          GOOS=linux GOARCH=amd64 go build -o bootstrap ${{matrix.service_folders}}/${{ env.ENTRY_FILE }}
          chmod +x bootstrap
          zip deploy.zip bootstrap
      
      - name: Check if lambda exists
        id: lambda_status
        if: steps.deployable.outcome == 'success'
        continue-on-error: true
        run: aws lambda get-function --function-name "${{env.REPO_NAME}}-${{matrix.service_folders}}" > /dev/null 2>&1
         
      - name: Create Function
        if: steps.lambda_status.outcome != 'success'
        run: |
          aws lambda create-function \
          --function-name "${{env.REPO_NAME}}-${{matrix.service_folders}}" \
          --zip-file fileb://deploy.zip \
          --handler bootstrap \
          --runtime provided.al2023 \
          --role ${{ secrets.AWS_ROLE }} > /dev/null 2>&1

      - name: Update Function
        if: steps.lambda_status.outcome == 'success'
        run: aws lambda update-function-code --function-name "${{env.REPO_NAME}}-${{matrix.service_folders}}" --zip-file fileb://deploy.zip > /dev/null 2>&1
